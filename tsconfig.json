{
  "extends": "@quasar/app/tsconfig-preset",
  "compilerOptions": {
    "baseUrl": ".", // 工作根目录
    "experimentalDecorators": true, // 启用实验性的ES装饰器
    "target": "es5", // 编译的目标是什么版本的
    "skipLibCheck": true,
    "importHelpers": true, // 通过tslib引入helper函数，文件必须是模块
    "moduleResolution": "node", // 模块解析策略，ts默认用node的解析策略，即相对的方式导入
    "esModuleInterop": true, // 允许export=导出，由import from 导入
    "downlevelIteration": true, // 降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现
    "allowSyntheticDefaultImports": true,
    // "allowUnreachableCode": true, // 不报告执行不到的代码错误。
    // "allowUnusedLabels": false,	// 不报告未使用的标签错误
    // "alwaysStrict": false, // 以严格模式解析并为每个源文件生成 "use strict"语句
    "jsx": "preserve", // 在 .tsx文件里支持JSX
    "sourceMap": true, // 是否生成map文件
    "module": "esnext", // 指定生成哪个模块系统代码
    // "noImplicitAny": false, // 是否默认禁用 any
    // "removeComments": true, // 是否移除注释
    "types": [ //指定引入的类型声明文件，默认是自动引入所有声明文件，一旦指定该选项，则会禁用自动引入，改为只引入指定的类型声明文件，如果指定空数组[]则不引用任何文件
      "quasar", // 引入 node 的类型声明
    ],
    "paths": { // 指定模块的路径，和baseUrl有关联，和webpack中resolve.alias配置一样
      "@/*": [ //指定后可以在文件之直接 import * from 'src';
        "src/*"
      ],
    },
    // "outDir": "./dist", // 输出目录
    // "declaration": true, // 是否自动创建类型声明文件
    // "declarationDir": "./lib", // 类型声明文件的输出目录
    "strict": true, // 开启所有严格的类型检查
    "allowJs": true, // 允许编译javascript文件。
    "lib": [  // TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入"ES2019.Array"
      "esnext",
      "dom",
      "dom.iterable",
      "scripthost"
    ]
  },
  // 指定一个匹配列表（属于自动指定该路径下的所有ts相关文件）
  "include": [
    "./src/**/*"
  ],
  // 指定一个排除列表（include的反向操作）
  // "exclude": [
  //   "demo.ts"
  // ],
  // 指定哪些文件使用该配置（属于手动一个个指定文件）
  // "files": [
  //   "demo.ts"
  // ]
}
